/*
 * sampl_sb monitor
 * 
 *   Sample Test Function Score Board
 *    
 *   This module calls a DPI function 
 *   to see if the sample test is correct.
 *   
 *   Output error to file and stdout
 * 
 *   Author: John Brunhaver, Ofer Shacham
 *   Created:          09/21/09
 *   Last Updated:     10/06/10
 *
 *   Copyright 2009 <jbrunhaver@gmail.com>  <shacham@stanford.edu> 
 */
 
  /****************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 22, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $pipe_depth = parameter(Name=>'PipelineDepth',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in bbox module");
//; my $filename   = parameter(Name=>'Filename',
//;                            Val=>"sb_log/smpl_sb.log", 
//;                            Doc=>"Log file name");
//;
//; # some handful subroutines
//;
//; # Convert a Fixed Point Number to a Floating
//; sub unFix {
//;   my $signal_name = shift @_;
//;   my $radix = shift @_;
//;   return " 1.0 * $signal_name / ( 128\'d1 << $radix ) ";
//; }


import "DPI" pure function int rastBBox_stest_check( int   v0_x, //uPoly
						int   v0_y,      //uPoly
						int   v1_x,      //uPoly
						int   v1_y,      //uPoly
						int   v2_x,      //uPoly
						int   v2_y,      //uPoly
						int   v3_x,      //uPoly
						int   v3_y,      //uPoly
						int   q,         //uPoly
						int   s_x,       //SAMPLE 
						int   s_y,       //SAMPLE
						int   hit        //HIT
						);   



module `mname()` 
(
  input logic signed   [`$sig_fig`-1:0]  poly_R16S[`$verts`-1:0][`$axis`-1:0],  // 4 Sets X,Y Fixed Point Values
  input logic unsigned [`$sig_fig`-1:0]  color_R16U[`$colors`-1:0],          // 4 Sets X,Y Fixed Point Values
  input logic                        isQuad_R16H,                     // Is Poly Quad?
  input logic                        validSamp_R16H,
  input logic signed   [`$sig_fig`-1:0]  sample_R16S[1:0],
			 
  input logic                        clk,                // Clock 
  input logic                        rst,                // Reset
			 
  input logic signed [`$sig_fig`-1:0]   hit_R18S[`$axis`-1:0],
  input logic signed [`$sig_fig`-1:0]   color_R18U[`$colors`-1:0],
  input                             hit_valid_R18H 
);
		   

   //Pipe Signals for Later Evaluation
   logic signed   [`$sig_fig`-1:0]  poly_RnnS[`$verts`-1:0][`$axis`-1:0];    // 4 Sets X,Y Fixed Point Values
   logic unsigned [`$sig_fig`-1:0]  color_RnnU[`$colors`-1:0];
   logic 		        isQuad_RnnH;                       // Is Poly Quad?
   logic 		        validSamp_RnnH;
   logic signed   [`$sig_fig`-1:0]  sample_RnnS[1:0];             //
   //Pipe Signals for Later Evaluation

   //Helper Signals
   int 		       one;
   int 		       file;
   
   assign one = 1 ;
   //Helper Signals



   
   initial begin
      file = $fopen("`$filename`","w");
   end

   always @(posedge clk) begin
      assert( rst | ( `$verts`==3 && !isQuad_RnnH ) || `$verts`==4 )
	else $error( "time=%10t ERROR: Saw a quad in a non-quad system", $time );
   end
   
   
   //Check if Sample in uPoly test is correct
   always @(posedge clk) begin
      #100;
       if(validSamp_RnnH 
	   &&
	   one !=  rastBBox_stest_check( int'(poly_RnnS[0][0]), //uPoly
				         int'(poly_RnnS[0][1]), //uPoly
					 int'(poly_RnnS[1][0]), //uPoly
					 int'(poly_RnnS[1][1]), //uPoly
					 int'(poly_RnnS[2][0]), //uPoly
					 int'(poly_RnnS[2][1]), //uPoly
					 int'(poly_RnnS[`$verts`-1][0]), //uPoly
					 int'(poly_RnnS[`$verts`-1][1]), //uPoly
					 int'(isQuad_RnnH)    , //uPoly	
					 int'(sample_RnnS[0]) , //SAMPLE 
					 int'(sample_RnnS[1]) , //SAMPLE
					 int'(hit_valid_R18H)   //IS HIT
				      )) begin

	    $fwrite( file , "@%0t: Sample Test ERROR!!!!\n\t\t" , $time );
	    $fwrite( file , "uP.v_0.x: %f\t" , `unFix('poly_RnnS[0][0]', $radix)`   );
	    $fwrite( file , "uP.v_0.y: %f\t" , `unFix('poly_RnnS[0][1]', $radix)`   );
	    $fwrite( file , "uP.v_1.x: %f\t" , `unFix('poly_RnnS[1][0]', $radix)`   );
	    $fwrite( file , "uP.v_1.y: %f\t" , `unFix('poly_RnnS[1][1]', $radix)`   );

		 $fwrite( file , "\n\t\t" );		 
	    $fwrite( file , "uP.v_2.x: %f\t" , `unFix('poly_RnnS[2][0]', $radix)`   );
	    $fwrite( file , "uP.v_2.y: %f\t" , `unFix('poly_RnnS[2][1]', $radix)`   );
	    
	    if( isQuad_RnnH ) begin
	       $fwrite( file , "uP.v_3.x: %f\t" , `unFix("poly_RnnS[$verts-1][0]", $radix)`   );
	       $fwrite( file , "uP.v_3.y: %f\t" , `unFix("poly_RnnS[$verts-1][1]", $radix)`   );
	    end

	    $fwrite( file , "\n\t\t" );

	    $fwrite( file , "sample.x:%f\t",  `unFix('sample_RnnS[0]', $radix)`   );
	    $fwrite( file , "sample.y:%f\t",  `unFix('sample_RnnS[1]', $radix)`   );
	    $fwrite( file , "hit:%b\n" , hit_valid_R18H );

	  
	  assert( 0 ) else $error( "time=%10t ERROR: Sample Test Check Failed", $time );
       end
   end



   
/* Pipe Required Signals */
	//; my $d_01 = generate( 'dff3', "d_01", 
	//;                        BitWidth=>$sig_fig,
	//;                        ArraySize1=>$verts,
	//;                        ArraySize2=>$axis,
	//;                        PipelineDepth=>$pipe_depth,
	//;                        Retime=>'NO' );
	`$d_01->instantiate()` (
					 .in(poly_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(poly_RnnS));
					 
	//; my $d_02 = generate( 'dff2', "d_02", 
	//;                        BitWidth=>$sig_fig,
	//;                        ArraySize1=>$colors,
	//;                        PipelineDepth=>$pipe_depth,
	//;                        Retime=>'NO' );
	`$d_02->instantiate()` (
					 .in(color_R16U) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(color_RnnU));
	
	//; my $d_03 = generate( 'dff2', "d_03", 
	//;                        BitWidth=>$sig_fig,
	//;                        ArraySize1=>2,
	//;                        PipelineDepth=>$pipe_depth,
	//;                        Retime=>'NO' );
	`$d_03->instantiate()` (
					 .in(sample_R16S) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out(sample_RnnS));				 
					 						
	//; my $d_04 = generate( 'dff', "d_04", 
	//;                        BitWidth=>2,
	//;                        PipelineDepth=>$pipe_depth,
	//;                        Retime=>'NO' );
	
	`$d_04->instantiate()` (
					 .in({validSamp_R16H, isQuad_R16H}) , 
				     .clk(clk) , .reset(rst), .en(1'b1),
				     .out({validSamp_RnnH, isQuad_RnnH}));	
					 
/* Pipe Required Signals */

   
endmodule 
