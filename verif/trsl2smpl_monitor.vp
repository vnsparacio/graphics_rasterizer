/*
 * trsl2smpl_monitor module
 * 
 *    This module monitors the interface between
 *    the test_iterator and sample_test block.
 * 
 */

  /****************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 22, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $filename   = parameter(Name=>'Filename',
//;                            Val=>"mon_log/trsl2smpl.log", 
//;                            Doc=>"Log file name");
//;
//; # some handful subroutines
//;
//; # Convert a Fixed Point Number to a Floating
//; sub unFix {
//;   my $signal_name = shift @_;
//;   my $radix = shift @_;
//;   return " 1.0 * $signal_name / ( 128\'d1 << $radix ) ";
//; }
 


module `mname()` (
   input signed [`$sig_fig`-1:0]   box_R13S[1:0][1:0],     // 2 Sets X,Y Fixed Point Values
   input signed [`$sig_fig`-1:0]   box_R14S[1:0][1:0],     // 2 Sets X,Y Fixed Point Values     
   input signed [`$sig_fig`-1:0]   poly_R14S[`$verts`-1:0][`$axis`-1:0],    // 4 Sets X,Y Fixed Point Values
   input signed [`$sig_fig`-1:0]   sample_R14S[1:0],       //Sample Location to Be Tested
   input                       validSamp_R14H,         // Valid Data for Operation
   input 		       isQuad_R14H,            // Is Poly Quad?
   input 		       clk ,                     // Clock 
   input 		       rst ,                     // Reset
   input 		       halt_RnnnnL              //Halt Signal 
		      );

   logic   signed [`$sig_fig`-1:0] box_R14S[1:0][1:0]  ;
   
/* Setup Phase */
   initial begin
      integer file;
      file = $fopen("`$filename`","w");
      $fwrite( file , " ++++++++++++++++++++++++++++++++++++++++ \n" );
      $fwrite( file , " Simulation Start \n" );
      $fwrite( file , " ++++++++++++++++++++++++++++++++++++++++ \n" );
      $fwrite( file , "\n" );
      
      @(negedge rst) ;
      
      while(1) begin
	 
	 @(posedge clk);
	 
	 if( validSamp_R14H ) begin
	    $fwrite( file , "@%0t:\n\t\t" , $time );
	    $fwrite( file , "uP.v_0.x: %f\t" , `unFix('poly_R14S[0][0]', $radix)`   );
	    $fwrite( file , "uP.v_0.y: %f\t" , `unFix('poly_R14S[0][1]', $radix)`   );
	    $fwrite( file , "uP.v_1.x: %f\t" , `unFix('poly_R14S[1][0]', $radix)`   );
	    $fwrite( file , "uP.v_1.y: %f\t" , `unFix('poly_R14S[1][1]', $radix)`   );

		 $fwrite( file , "\n\t\t" );
	    $fwrite( file , "uP.v_2.x: %f\t" , `unFix('poly_R14S[2][0]', $radix)`   );
	    $fwrite( file , "uP.v_2.y: %f\t" , `unFix('poly_R14S[2][1]', $radix)`   );
	 
	//; if(	 $verts >= 4 ) {   
	    if( isQuad_R14H ) begin
	       $fwrite( file , "uP.v_3.x: %f\t" , `unFix('poly_R14S[3][0]', $radix)`   );
	       $fwrite( file , "uP.v_3.y: %f\t" , `unFix('poly_R14S[3][1]', $radix)`   );
	    end
	//; }

	    $fwrite( file , "\n\t\t" );
	    
	    $fwrite( file, "box.ll.x:%f\t",  `unFix('box_R14S[0][0]', $radix)`   );
	    $fwrite( file, "box.ll.y:%f\t",  `unFix('box_R14S[0][1]', $radix)`   );
	    $fwrite( file, "box.ur.x:%f\t",  `unFix('box_R14S[1][0]', $radix)`   );
	    $fwrite( file, "box.ur.y:%f\t",  `unFix('box_R14S[1][1]', $radix)`   );

	    
	    $fwrite( file , "\n\t\t" );
	    $fwrite( file, "box@input.ll.x:%.1f\t",  `unFix('box_R13S[0][0]', $radix)`   );
	    $fwrite( file, "box@input.ll.y:%.1f\t",  `unFix('box_R13S[0][1]', $radix)`   );
	    $fwrite( file, "box@input.ur.x:%.1f\t",  `unFix('box_R13S[1][0]', $radix)`   );
	    $fwrite( file, "box@input.ur.y:%.1f\t",  `unFix('box_R13S[1][1]', $radix)`   );

	    $fwrite( file , "\n\t\t" );

	    $fwrite( file , "sample.x:%f\t",  `unFix('sample_R14S[0]', $radix)`   );
	    $fwrite( file , "sample.y:%f\t",  `unFix('sample_R14S[1]', $radix)`   );
	    
	    $fwrite( file , "\n\t\t" );

	    $fwrite( file , "halted:%b\n" , ~halt_RnnnnL );
	    
	    
	 end else begin // if ( validPoly_R10H )
	    $fwrite( file , "@%0t: Invalid Data \n" , $time );
	    $fwrite( file , "\t\thalted: %b" , ~halt_RnnnnL );
	    
	    $fwrite( file , "\n\t\t" );
	    $fwrite( file, "box.ll.x:%f\t",  `unFix('box_R14S[0][0]', $radix)`   );
	    $fwrite( file, "box.ll.y:%f\t",  `unFix('box_R14S[0][1]', $radix)`   );
	    $fwrite( file, "box.ur.x:%f\t",  `unFix('box_R14S[1][0]', $radix)`   );
	    $fwrite( file, "box.ur.y:%f\t",  `unFix('box_R14S[1][1]', $radix)`   );

	    $fwrite( file , "\n\t\t" );
	    $fwrite( file, "box@input.ll.x:%.1f\t",  `unFix('box_R13S[0][0]', $radix)`   );
	    $fwrite( file, "box@input.ll.y:%.1f\t",  `unFix('box_R13S[0][1]', $radix)`   );
	    $fwrite( file, "box@input.ur.x:%.1f\t",  `unFix('box_R13S[1][0]', $radix)`   );
	    $fwrite( file, "box@input.ur.y:%.1f\t",  `unFix('box_R13S[1][1]', $radix)`   );
	    $fwrite( file , "\n" );
	 end    
      end // while (1)
   end
endmodule
