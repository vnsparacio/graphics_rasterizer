 /*   Simulation bench for Hider
  * 
  *   Author: John Brunhaver, Ofer Shacham
  *   Created:          09/21/09
  *   Last Updated:     10/06/10
  *
  *   Copyright 2009 <jbrunhaver@gmail.com>  <shacham@stanford.edu> 
  */
  
/* ***************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 20, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $pipes_box  = parameter(Name=>'PipesBox',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in bbox module");
//; my $pipes_iter = parameter(Name=>'PipesIter',
//;                            Val=>1, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in iter module");
//; my $pipes_hash = parameter(Name=>'PipesHash',
//;                            Val=>2, Min=>1, Step=>1, 
//;                            Doc=>"Number of pipe stages in hash module");
//; my $pipes_samp = parameter(Name=>'PipesSamp',
//;                            Val=>4, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in sample module");
//; my $dut_obj    = parameter(Name=>'DUT_obj',
//;                            Val=>0, 
//;                            Doc=>"the dut pbj pointer");
//; # local variables
//; my $delay_r2z_mon = $pipes_samp;
//; my $delay_r2z_sb = $pipes_samp;
//; my $delay_bbx_sb = $pipes_box;


//Environment Constants
//; #`define T_CLK 1000
   
//; #`timescale 1ps/1ps
//Environment Constants


module `mname()` 
(
     // Output Signals (to DUT inputs)
     output logic signed   [`$sig_fig`-1:0]  poly_R10S[`$verts`-1:0][`$axis`-1:0] , // Poly Position
     output logic unsigned [`$sig_fig`-1:0]  color_R10U[`$colors`-1:0] ,         // Color of Poly
     output logic 	                isQuad_R10H ,                    // Is Poly Quad?
     output logic 	                validPoly_R10H ,                 // Valid Data for Operation

     // Output Control Signals (to DUT inputs)
     output logic signed [`$sig_fig`-1:0]    screen_RnnnnS[1:0] , // Screen Dimensions
     output logic        [3:0]   	subSample_RnnnnU ,   // SubSample_Interval

     // Global Signals 
     input logic                        clk,                 // Clock 
     output logic                        rst,                 // Reset

     // Input Control Signals (from DUT outputs)
     input logic                       halt_RnnnnL,
     input logic 		       poly_R13S,
 
     // Input Signals (from DUT outputs)
     input logic signed   [`$sig_fig`-1:0] hit_R18S[`$axis`-1:0],       // Hit Location
     input logic signed   [`$sig_fig`-1:0] hit_R18S_top[`$axis`-1:0],       // Hit Location
     input logic unsigned [`$sig_fig`-1:0] color_R18U[`$colors`-1:0] ,  // Color of Poly 
     input logic unsigned [`$sig_fig`-1:0] color_R18U_top[`$colors`-1:0] ,  // Color of Poly 
     input logic                       hit_valid_R18H,            // Is this a hit? 
     input logic                       hit_valid_R18H_top            // Is this a hit?
);

   // Some simulation variables
   int seed;
   int timeout;
   int dummy; // for random number generator initialization
   string  testname;

   int ss_w_lg2_RnnnnS;

   //BENCH Logical Signals
   logic 		       test_finish;
    
   
   /*****************************************
   *
   * Instance Driver
   * 
   *****************************************/
   
   //probably need to fix....
    //; my $rast_driver = generate( 'rast_driver', "rast_driver", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors);
   `$rast_driver -> instantiate()` (
      .halt_RnnnnL(`$dut_obj->get_instance_path()`.halt_RnnnnL) ,  // Input:  Indicates No Work Should Be Done
      .validPoly_R13H(`$dut_obj->get_instance_path()`.validPoly_R13H) ,  
      .poly_R10S(poly_R10S) ,                // Output: 4 Sets X,Y Fixed Point Values
      .isQuad_R10H(isQuad_R10H)  ,           // Output: Is Poly Quad?
      .color_R10U(color_R10U) ,              // Output: Color of Polygon
      .validPoly_R10H(validPoly_R10H),       // Output: Valid Data for Operation
      .screen_RnnnnS(screen_RnnnnS) ,        // Output: Screen Dimensions
      .subSample_RnnnnU(subSample_RnnnnU),   // Output: SubSample_Interval
      .ss_w_lg2_RnnnnS(ss_w_lg2_RnnnnS),     // Output: SubSample_Interval

      .clk(clk),                             // Input:  Clock 
      .rst(rst)                              // Input:  Reset
      );

   
   /******************************************
   * 
   * ZBuff Model
   * 
   ******************************************/
    
	//; my $zbuff = generate( 'zbuff', "zbuff", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        Filename=>"f_image.ppm");
    `$zbuff -> instantiate()` (
      .clk(clk),                // Clock 
      .rst(rst),                // Reset
      
      .screen_RnnnnS(screen_RnnnnS) ,        // Output: Screen Dimensions
      .subSample_RnnnnU(subSample_RnnnnU),   // Output: SubSample_Interval
      .ss_w_lg2_RnnnnS(ss_w_lg2_RnnnnS),
      
     .hit_R18S(hit_R18S),             //Sample Location and depth
     .hit_R18S_top(hit_R18S_top),             //Sample_top Location and depth
      .color_R18U(color_R18U),         //Color of Sample Hit
      .color_R18U_top(color_R18U_top),         //Color of Sample Hit
      .hit_valid_R18H(hit_valid_R18H),  //Is sample_top hit valid
      .hit_valid_R18H_top(hit_valid_R18H_top)  //Is sample_top hit valid
      );

   
   /*****************************************
   *
   * Instance Scoreboards
   * 
   *****************************************/
    
	//; my $bbx_sb = generate( 'bbx_sb', "bbx_sb", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        PipelineDepth=>$delay_bbx_sb,
	//;                        Filename=>"sb_log/bbx_sb.log");
   `$bbx_sb -> instantiate()` (
		   .poly_R10S(poly_R10S) ,                      // Input: 4 Sets X,Y Fixed Point Values
		   .validPoly_R10H(validPoly_R10H),             // Input: Valid Polygon
	   	   .isQuad_R10H(isQuad_R10H) ,                  // Input: Is Poly Quad?

		   .poly_R13S(`$dut_obj->get_instance_path()`.poly_R13S) ,            // Input: 4 Sets X,Y Fixed Point Values
		   .box_R13S(`$dut_obj->get_instance_path()`.box_R13S),		// Input: Bound Box
		   .validPoly_R13H(`$dut_obj->get_instance_path()`.validPoly_R13H) ,  // Input: Valid Data for Operation
		   .isQuad_R13H(`$dut_obj->get_instance_path()`.isQuad_R13H) ,        // Input: Is Poly Quad?
			       .invalidate_R10H(`$dut_obj->get_instance_path()`.bbox.invalidate_R10H),
		   
		   .clk(clk),                                   // Input: Clock 
		   .rst(rst),                                   // Input: Reset
		   
		   .halt_RnnnnL(`$dut_obj->get_instance_path()`.halt_RnnnnL),         // Input: Halt Signal			
		   .screen_RnnnnS(screen_RnnnnS),               // Screen Size
	           .subSample_RnnnnU (subSample_RnnnnU)         // Flag for subsample
							       
		   );
 
    //; my $smpl_sb = generate( 'smpl_sb', "smpl_sb", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        PipelineDepth=>$delay_r2z_sb,
	//;                        Filename=>"sb_log/smpl_sb.log");
   `$smpl_sb -> instantiate()` (
	 		 .poly_R16S(`$dut_obj->get_instance_path()`.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(`$dut_obj->get_instance_path()`.color_R16U),         // Polygon Color
			 .isQuad_R16H(`$dut_obj->get_instance_path()`.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(`$dut_obj->get_instance_path()`.validSamp_R16H), 
			 .sample_R16S(`$dut_obj->get_instance_path()`.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .color_R18U(color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H) 
								   
			  );

    //; my $smpl_sb_top = generate( 'smpl_sb', "smpl_sb_top", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        PipelineDepth=>$delay_r2z_sb,
	//;                        Filename=>"sb_log/smpl_sb.log");
   `$smpl_sb_top -> instantiate()` (
	 		 .poly_R16S(`$dut_obj->get_instance_path()`.poly_R16S_top),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(`$dut_obj->get_instance_path()`.color_R16U_top),         // Polygon Color
			 .isQuad_R16H(`$dut_obj->get_instance_path()`.isQuad_R16H_top),       // Is Poly Quad?
		 	 .validSamp_R16H(`$dut_obj->get_instance_path()`.validSamp_R16H_top), 
			 .sample_R16S(`$dut_obj->get_instance_path()`.sample_R16S_top),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S_top),
			 .color_R18U(color_R18U_top),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H_top) 
								   
			  );
			  
			  
    //; my $smpl_cnt_sb = generate( 'smpl_cnt_sb', "smpl_cnt_sb", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        PipelineDepth=>$delay_r2z_sb+1,
	//;                        Filename=>"sb_log/smpl_cnt_sb.log");
   `$smpl_cnt_sb -> instantiate()` (
	 		 .poly_R16S(`$dut_obj->get_instance_path()`.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(`$dut_obj->get_instance_path()`.color_R16U),         // Polygon Color
			 .isQuad_R16H(`$dut_obj->get_instance_path()`.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(`$dut_obj->get_instance_path()`.validSamp_R16H), 
			 .sample_R16S(`$dut_obj->get_instance_path()`.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .color_R18U(color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H) ,			      
			 .hit_valid_R18H_top(hit_valid_R18H_top) ,

		 	 .screen_RnnnnS(screen_RnnnnS),         // Screen Size
	                 .subSample_RnnnnU(subSample_RnnnnU),    // Flag for subsample
							   
			 .s_x_RnnS(`$dut_obj->get_instance_path()`.hash_jtree.sample_R14S[0]) ,
                         .s_y_RnnS(`$dut_obj->get_instance_path()`.hash_jtree.sample_R14S[1]) ,
                         .jitter_x_RnnS(`$dut_obj->get_instance_path()`.hash_jtree.jitt_val_R14H[0]) ,
                         .jitter_y_RnnS(`$dut_obj->get_instance_path()`.hash_jtree.jitt_val_R14H[1]) ,  
			 .s_j_x_RnnS(`$dut_obj->get_instance_path()`.hash_jtree.sample_jitted_R14S[0]),
			 .s_j_y_RnnS(`$dut_obj->get_instance_path()`.hash_jtree.sample_jitted_R14S[1]),

			 .s_x_RnnS_top(`$dut_obj->get_instance_path()`.hash_jtree_top.sample_R14S[0]) ,
                         .s_y_RnnS_top(`$dut_obj->get_instance_path()`.hash_jtree_top.sample_R14S[1]) ,
                         .jitter_x_RnnS_top(`$dut_obj->get_instance_path()`.hash_jtree_top.jitt_val_R14H[0]) ,
                         .jitter_y_RnnS_top(`$dut_obj->get_instance_path()`.hash_jtree_top.jitt_val_R14H[1]) ,  
			 .s_j_x_RnnS_top(`$dut_obj->get_instance_path()`.hash_jtree_top.sample_jitted_R14S[0]),
			 .s_j_y_RnnS_top(`$dut_obj->get_instance_path()`.hash_jtree_top.sample_jitted_R14S[1])

			 );
			 
			 
	/*****************************************
   *
   * Instance Monitors
   * 
   *****************************************/
   
    //; my $perf_mon = generate( 'perf_monitor', "perf_mon", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        PipelineDepth=>$delay_r2z_mon);
   `$perf_mon -> instantiate()` (
			 .poly_R10S(`$dut_obj->get_instance_path()`.poly_R10S), 
	 		 .poly_R16S(`$dut_obj->get_instance_path()`.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(`$dut_obj->get_instance_path()`.color_R16U),         // Polygon Color
			 .isQuad_R16H(`$dut_obj->get_instance_path()`.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(`$dut_obj->get_instance_path()`.validSamp_R16H), 
			 .sample_R16S(`$dut_obj->get_instance_path()`.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .hit_R18S_top(hit_R18S_top),
			 .color_R18U(`$dut_obj->get_instance_path()`.color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H), 
			 .hit_valid_R18H_top(hit_valid_R18H_top) 
									   );
									   
									   
   
   //; if(0) { # turn this off when you run big test vectors

 
    //; my $gm2rst_mon = generate( 'gm2rst_monitor', "gm2rst_mon", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        Filename=>"mon_log/gm2rst.log");
   `$gm2rst_mon -> instantiate()` (
			.poly_R10S(poly_R10S) ,            // Input: 4 Sets X,Y Fixed Point Values
			.isQuad_R10H (isQuad_R10H) ,       // Input: Is Poly Quad?
			.validPoly_R10H(validPoly_R10H) ,  // Input: Valid Data for Operation
			.screen_RnnnnS(screen_RnnnnS) ,        // Input: Screen Dimensions
			.subSample_RnnnnU (subSample_RnnnnU),  // Input: SubSample_Interval
				     
			.clk(clk),                             // Input: Clock 
			.rst(rst),                             // Input: Reset
				     
		        .halt_RnnnnL(`$dut_obj->get_instance_path()`.halt_RnnnnL)     // Input: Halt Signal			
								     );


       //; my $bbx2trsl_mon = generate( 'bbx2trsl_monitor', "bbx2trsl_mon", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        Filename=>"mon_log/bbx2trsl.log");
   `$bbx2trsl_mon -> instantiate()` (

			.poly_R13S(`$dut_obj->get_instance_path()`.poly_R13S) ,            // Input: 4 Sets X,Y Fixed Point Values
			.isQuad_R13H(`$dut_obj->get_instance_path()`.isQuad_R13H) ,// Input: Is Poly Quad?
			.box_R13S(`$dut_obj->get_instance_path()`.box_R13S),					     
			.validPoly_R13H(`$dut_obj->get_instance_path()`.validPoly_R13H) ,  // Input: Valid Data for Operation
						     
			.clk(clk),                             // Input: Clock 
			.rst(rst),                             // Input: Reset
				     
			.halt_RnnnnL(`$dut_obj->get_instance_path()`.halt_RnnnnL)     // Input: Halt Signal			
									   );
   

    //; my $trsl2smpl_mon = generate( 'trsl2smpl_monitor', "trsl2smpl_mon", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        Filename=>"mon_log/trsl2smple.log");
   `$trsl2smpl_mon -> instantiate()` (
			.box_R13S(`$dut_obj->get_instance_path()`.box_R13S),               //Bounding Box       
			.box_R14S(`$dut_obj->get_instance_path()`.test_iterator.box_R14S),
 			.poly_R14S(`$dut_obj->get_instance_path()`.poly_R14S) ,           
			.isQuad_R14H(`$dut_obj->get_instance_path()`.isQuad_R14H) ,                    
			.sample_R14S(`$dut_obj->get_instance_path()`.sample_R14S),         //Sample Location 
			.validSamp_R14H(`$dut_obj->get_instance_path()`.validSamp_R14H),   // Valid Data for Operation
			     
			.clk(clk),                                       // Input: Clock 
			.rst(rst),                                       // Input: Reset
				     
			.halt_RnnnnL(`$dut_obj->get_instance_path()`.halt_RnnnnL)              // Input: Halt Signal
		      
										);
   							   

										
    //; my $rst2zbuff_mon = generate( 'rst2zbuff_monitor', "rst2zbuff_mon", 
	//;                        SigFig=>$sig_fig,
	//;                        Radix=>$radix,
	//;                        Vertices=>$verts,
	//;                        Axis=>$axis,
	//;                        Colors=>$colors,
	//;                        PipelineDepth=>$delay_r2z_mon,
	//;                        Filename=>"mon_log/rst2zbuff.log");
   `$rst2zbuff_mon -> instantiate()` (
	 		 .poly_R16S(`$dut_obj->get_instance_path()`.poly_R16S),           // 4 Sets X,Y Fixed Point Values
			 .color_R16U(`$dut_obj->get_instance_path()`.color_R16U),         // Polygon Color
			 .isQuad_R16H(`$dut_obj->get_instance_path()`.isQuad_R16H),       // Is Poly Quad?
		 	 .validSamp_R16H(`$dut_obj->get_instance_path()`.validSamp_R16H), 
			 .sample_R16S(`$dut_obj->get_instance_path()`.sample_R16S),       // Will change for JIT -todo
			      
  			 .clk(clk),                // Clock 
 			 .rst(rst),                // Reset
			 
			 .hit_R18S(hit_R18S),
			 .color_R18U(`$dut_obj->get_instance_path()`.color_R18U),         // Polygon Color			      
			 .hit_valid_R18H(hit_valid_R18H) 
									   
									   );
	//; }
		
		
		
		  

   /*****************************************
    * Main simulation task
    *****************************************/
   initial begin
      rst = 1'b1;    
      `$rast_driver->iname()`.InitLines();
      
      $display("time=%10t ************** Loading Arguments *****************", $time);
      ProcessArgs();
       $display("Seed=%d ", seed);
      dummy = $random(seed); // initial the random number generator
      repeat (15) @(posedge clk);

      `$rast_driver->iname()`.testname = testname; // tell the driver what to drive
      `$rast_driver->iname()`.InitTest();
      repeat (15) @(posedge clk);

      `$zbuff->iname()`.init_buffers();
      repeat (15) @(posedge clk);
      
      $display("time=%10t ************** Runnning Test *****************", $time);
      rst = 1'b0;

      if ($test$plusargs("af")) begin
	 $toggle_start(); //start activity factor extraction
      end

      `$rast_driver->iname()`.testname = testname; // tell the driver what to drive
      `$rast_driver->iname()`.RunTest(); // Tell the driver to start
      
      while (!`$rast_driver->iname()`.TestFinish) // wait for driver to finish
	@(posedge clk);
      repeat (15) @(posedge clk);

      if ($test$plusargs("af")) begin
	 $toggle_stop(); //activity factor extraction end
      end  
      
      `$zbuff->iname()`.write_image();

       if ($test$plusargs("af")) begin
	  $display("time=%10t ******* Printing AF Extraction *********\n",$time);
	  $toggle_report("af_extraction.saif",1.0e-9,`$dut_obj->get_instance_path()`);	  
       end  
      
      $display("time=%10t ********************FINISH***********************", $time);
      $display("Cycles: %d uPoly: %d sampleTests: %d sampleHits: %d \n" ,
	       `$perf_mon->iname()`.cycle_count  , `$perf_mon->iname()`.micropolygon_count ,
	       `$perf_mon->iname()`.sample_count , `$perf_mon->iname()`.sample_hit_count );
      $display("JJ: uPoly / cycle : %f " , (1.0*`$perf_mon->iname()`.micropolygon_count)/
	       (1.0* `$perf_mon->iname()`.cycle_count));
      $display("JJ: cycle / uPoly : %f " , 
	       (1.0* `$perf_mon->iname()`.cycle_count)/
	       (1.0*`$perf_mon->iname()`.micropolygon_count) );   
   
      //Call Function for Zbuff write out.
      $finish(2);
   end // initial begin

   // Timeout mechanism
   initial begin
      repeat(timeout) @(posedge clk);
       $display("time=%10t ***************** ERROR: TIMEOUT  *******************", $time);     
      $finish(2);
   end
   
   
   
   
   
   /****************************************************************************
    * Auxiliary Tasks:
    * *************************************************************************/
   task ProcessArgs;
      begin
         // if this is a "+wave" run, it must record all signals
         if ( $test$plusargs("wave") ) begin
            //         levels  instance
            $display("time=%10t Starting Wave Capture", $time);
            /*
	    $vcdpluson(0,`$dut_obj->get_instance_path()`); //
            $vcdpluson(0,rast_driver); //
            $vcdpluson(0,bbox_scoreboard); //
            $vcdpluson(0,sampletest_scoreboard); //
            $vcdpluson(0,sampletest_count_scoreboard); //
            
	    $vcdplusmemon(0,`$dut_obj->get_instance_path()`);
	    $vcdplusmemon(0,rast_driver); //
            $vcdplusmemon(0,bbox_scoreboard); //
            $vcdplusmemon(0,sampletest_scoreboard); //
            $vcdplusmemon(0,sampletest_count_scoreboard); //

	    $vcdplusmemon(0,`$zbuff->iname()`.hit_R18S); //
	    $vcdplusmemon(0,`$zbuff->iname()`.color_R18U); //
	    $vcdplusmemon(0,`$zbuff->iname()`.color); //
	    $vcdpluson(0,zbuff); //
            */
	    $vcdplusmemon(0);
	    $vcdpluson(0);

         end // if ( $test$plusargs("wave") )
	 if ( $test$plusargs("af") ) begin
	    $set_gate_level_monitoring("rtl_on");
	    $set_toggle_region( `$dut_obj->get_instance_path()` ); //select scope for aqctivity factor extraction
	 end
         // look for +seed+12345 runtime args
         if ($test$plusargs("seed")) begin
	    $value$plusargs("seed=%d", seed);
	    $display("Simulation will run with random seed=%0d", seed);
         end
         else begin
	    seed=12345;
	    $display("Simulation run with default random seed=%0d", seed);
	 end

         // look for +timout+1000 runtime args
         if ($test$plusargs("timeout")) begin
	    $value$plusargs("timeout=%d", timeout);
	    $display("Simulation will timout after %0d cycles", timeout);
         end
         else begin
	    timeout=50000000 ;
	    $display("Simulation will timout after %0d cycles", timeout);
	 end

	 // look for +testname=sample_test.dat type of argument
         if ($test$plusargs("testname")) begin
	    $value$plusargs("testname=%s", testname);
	    $display("Simulation will use test file %s", testname);
         end
         else begin
	    testname="tests/sample_test.dat";
	    $display("Simulation will use test file %s", testname);
	 end
	 
      end
   endtask // ProcessArgs
   /****************************************************************************
    * Auxiliary Tasks:
    * *************************************************************************/

endmodule 
